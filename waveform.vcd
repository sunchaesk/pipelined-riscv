$version Generated by VerilatedVcd $end
$date Thu Jul 11 23:33:53 2024
 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 D! clk $end
  $var wire  1 E! reset $end
  $scope module riscv $end
   $var wire 32 H! alu_result [31:0] $end
   $var wire  1 D! clk $end
   $var wire 32 ] ex_mem_alu_result_e [31:0] $end
   $var wire  1 F! ex_mem_branch_flag_e $end
   $var wire  1 . ex_mem_memwrite_e $end
   $var wire 32 ^ ex_mem_pc_plus_4_e [31:0] $end
   $var wire  1 b ex_mem_pc_src_e $end
   $var wire 32 \ ex_mem_pc_target_e [31:0] $end
   $var wire  5 _ ex_mem_rd_e [4:0] $end
   $var wire  1 ` ex_mem_regwrite_e $end
   $var wire  2 a ex_mem_result_src_e [1:0] $end
   $var wire 32 - ex_mem_writedata_e [31:0] $end
   $var wire  1 [ ex_mem_zero_flag_e $end
   $var wire  5 S ex_rd_e [4:0] $end
   $var wire  5 + ex_rs1_e [4:0] $end
   $var wire  5 , ex_rs2_e [4:0] $end
   $var wire  1 m flush_d $end
   $var wire  1 n flush_e $end
   $var wire  2 o forward_operand_a_e [1:0] $end
   $var wire  2 p forward_operand_b_e [1:0] $end
   $var wire  4 ( id_ex_alu_control_d [3:0] $end
   $var wire  1 * id_ex_alu_src_d $end
   $var wire  3 ) id_ex_branch_control_d [2:0] $end
   $var wire  1 ' id_ex_branch_d $end
   $var wire 32 U id_ex_imm [31:0] $end
   $var wire  1 & id_ex_jump_d $end
   $var wire  1 % id_ex_memwrite_d $end
   $var wire 32 T id_ex_pc [31:0] $end
   $var wire 32 X id_ex_pc_plus_4 [31:0] $end
   $var wire  5 S id_ex_rd [4:0] $end
   $var wire 32 # id_ex_reg_a [31:0] $end
   $var wire 32 $ id_ex_reg_b [31:0] $end
   $var wire  1 V id_ex_regwrite_d $end
   $var wire  2 W id_ex_result_src_d [1:0] $end
   $var wire  5 + id_ex_rs1_d_reg [4:0] $end
   $var wire  5 Y id_ex_rs1_d_wire [4:0] $end
   $var wire  5 , id_ex_rs2_d_reg [4:0] $end
   $var wire  5 Z id_ex_rs2_d_wire [4:0] $end
   $var wire 32 P if_id_instr [31:0] $end
   $var wire 32 Q if_id_pc [31:0] $end
   $var wire 32 R if_id_pc_plus_4 [31:0] $end
   $var wire 32 ] mem_alu_result_m [31:0] $end
   $var wire  1 ` mem_regwrite_m $end
   $var wire 32 f mem_wb_alu_result_w [31:0] $end
   $var wire 32 g mem_wb_pc_plus_4_w [31:0] $end
   $var wire  5 h mem_wb_rd_w [4:0] $end
   $var wire 32 c mem_wb_readdata_w [31:0] $end
   $var wire  1 d mem_wb_regwrite_w $end
   $var wire  2 e mem_wb_result_src_w [1:0] $end
   $var wire  1 E! reset $end
   $var wire  1 l stall_d $end
   $var wire  1 l stall_f $end
   $var wire  5 j wb_rd [4:0] $end
   $var wire  1 i wb_regwrite $end
   $var wire 32 k wb_result [31:0] $end
   $var wire  1 I! zero_flag $end
   $scope module EX_unit $end
    $var wire  4 ( alu_control_e [3:0] $end
    $var wire 32 ] alu_result [31:0] $end
    $var wire 32 ] alu_result_m [31:0] $end
    $var wire 32 "! alu_result_temp [31:0] $end
    $var wire  1 * alu_src_e $end
    $var wire  3 ) branch_control_e [2:0] $end
    $var wire  1 ' branch_e $end
    $var wire  1 F! branch_flag $end
    $var wire  1 D! clk $end
    $var wire  1 . ex_mem_memwrite_e $end
    $var wire 32 ^ ex_mem_pc_plus_4_e [31:0] $end
    $var wire  5 _ ex_mem_rd [4:0] $end
    $var wire  1 ` ex_mem_regwrite_e $end
    $var wire  2 a ex_mem_result_src_e [1:0] $end
    $var wire  5 S ex_rd_e [4:0] $end
    $var wire  5 + ex_rs1_e [4:0] $end
    $var wire  5 , ex_rs2_e [4:0] $end
    $var wire  1 n flush_e $end
    $var wire  2 o forward_operand_a_e [1:0] $end
    $var wire  2 p forward_operand_b_e [1:0] $end
    $var wire 32 ~ hazard_a [31:0] $end
    $var wire 32 G! hazard_b [31:0] $end
    $var wire 32 U immediate_e [31:0] $end
    $var wire  1 & jump_e $end
    $var wire  1 % memwrite_e $end
    $var wire 32 ~ operand_a [31:0] $end
    $var wire 32 !! operand_b [31:0] $end
    $var wire 32 T pc_e [31:0] $end
    $var wire 32 X pc_plus_4_e [31:0] $end
    $var wire  1 b pc_src_e $end
    $var wire 32 \ pc_target_e [31:0] $end
    $var wire  5 S rd_e [4:0] $end
    $var wire  1 V regwrite_e $end
    $var wire  1 E! reset $end
    $var wire  2 W result_src_e [1:0] $end
    $var wire 32 f result_w [31:0] $end
    $var wire 32 # rs1_data_e [31:0] $end
    $var wire  5 + rs1_e [4:0] $end
    $var wire 32 $ rs2_data_e [31:0] $end
    $var wire  5 , rs2_e [4:0] $end
    $var wire 32 - writedata [31:0] $end
    $var wire  1 [ zero_flag $end
    $scope module ALU_unit $end
     $var wire  4 ( alu_control [3:0] $end
     $var wire 32 "! alu_result [31:0] $end
     $var wire 32 ~ in_a [31:0] $end
     $var wire 32 !! in_b [31:0] $end
     $var wire  1 [ zero_flag $end
    $upscope $end
    $scope module branch_condition_unit $end
     $var wire  3 ) branch_control [2:0] $end
     $var wire  1 F! branch_flag $end
     $var wire 32 ~ in_a [31:0] $end
     $var wire 32 !! in_b [31:0] $end
    $upscope $end
   $upscope $end
   $scope module ID_unit $end
    $var wire  4 ( alu_control_d [3:0] $end
    $var wire  4 { alu_control_d_temp [3:0] $end
    $var wire  1 * alu_src_d $end
    $var wire  1 z alu_src_d_temp $end
    $var wire  3 ) branch_control_d [2:0] $end
    $var wire  3 s branch_control_d_temp [2:0] $end
    $var wire  1 ' branch_d $end
    $var wire  1 y branch_d_temp $end
    $var wire  1 D! clk $end
    $var wire  1 m flush_d $end
    $var wire  3 s funct3 [2:0] $end
    $var wire  1 t funct7b5 $end
    $var wire 32 O i [31:0] $end
    $var wire 32 T id_ex_pc [31:0] $end
    $var wire 32 X id_ex_pc_plus_4 [31:0] $end
    $var wire  5 + id_ex_rs1_d_reg [4:0] $end
    $var wire  5 Y id_ex_rs1_d_wire [4:0] $end
    $var wire  5 , id_ex_rs2_d_reg [4:0] $end
    $var wire  5 Z id_ex_rs2_d_wire [4:0] $end
    $var wire 32 U immediate [31:0] $end
    $var wire 32 u immediate_temp [31:0] $end
    $var wire 32 P instruction [31:0] $end
    $var wire  1 & jump_d $end
    $var wire  1 x jump_d_temp $end
    $var wire  1 % memwrite_d $end
    $var wire  1 w memwrite_d_temp $end
    $var wire  7 r opcode [6:0] $end
    $var wire 32 Q pc [31:0] $end
    $var wire 32 R pc_plus_4 [31:0] $end
    $var wire  5 j rd [4:0] $end
    $var wire  5 S rd_out [4:0] $end
    $var wire 32 / reg_array(0) [31:0] $end
    $var wire 32 0 reg_array(1) [31:0] $end
    $var wire 32 9 reg_array(10) [31:0] $end
    $var wire 32 : reg_array(11) [31:0] $end
    $var wire 32 ; reg_array(12) [31:0] $end
    $var wire 32 < reg_array(13) [31:0] $end
    $var wire 32 = reg_array(14) [31:0] $end
    $var wire 32 > reg_array(15) [31:0] $end
    $var wire 32 ? reg_array(16) [31:0] $end
    $var wire 32 @ reg_array(17) [31:0] $end
    $var wire 32 A reg_array(18) [31:0] $end
    $var wire 32 B reg_array(19) [31:0] $end
    $var wire 32 1 reg_array(2) [31:0] $end
    $var wire 32 C reg_array(20) [31:0] $end
    $var wire 32 D reg_array(21) [31:0] $end
    $var wire 32 E reg_array(22) [31:0] $end
    $var wire 32 F reg_array(23) [31:0] $end
    $var wire 32 G reg_array(24) [31:0] $end
    $var wire 32 H reg_array(25) [31:0] $end
    $var wire 32 I reg_array(26) [31:0] $end
    $var wire 32 J reg_array(27) [31:0] $end
    $var wire 32 K reg_array(28) [31:0] $end
    $var wire 32 L reg_array(29) [31:0] $end
    $var wire 32 2 reg_array(3) [31:0] $end
    $var wire 32 M reg_array(30) [31:0] $end
    $var wire 32 N reg_array(31) [31:0] $end
    $var wire 32 3 reg_array(4) [31:0] $end
    $var wire 32 4 reg_array(5) [31:0] $end
    $var wire 32 5 reg_array(6) [31:0] $end
    $var wire 32 6 reg_array(7) [31:0] $end
    $var wire 32 7 reg_array(8) [31:0] $end
    $var wire 32 8 reg_array(9) [31:0] $end
    $var wire  1 V regwrite_d $end
    $var wire  1 v regwrite_d_temp $end
    $var wire  1 E! reset $end
    $var wire  2 W result_src_d [1:0] $end
    $var wire  2 | result_src_d_temp [1:0] $end
    $var wire  5 Y rs1 [4:0] $end
    $var wire 32 # rs1_data [31:0] $end
    $var wire  5 Z rs2 [4:0] $end
    $var wire 32 $ rs2_data [31:0] $end
    $var wire  1 l stall_d $end
    $var wire  1 i writeback_control $end
    $var wire 32 k writeback_data [31:0] $end
    $scope module control_signal_unit $end
     $var wire  7 l! OP_B [6:0] $end
     $var wire  7 m! OP_I [6:0] $end
     $var wire  7 n! OP_J [6:0] $end
     $var wire  7 j! OP_LW [6:0] $end
     $var wire  7 o! OP_R [6:0] $end
     $var wire  7 k! OP_SW [6:0] $end
     $var wire  4 { alu_control_d [3:0] $end
     $var wire  1 z alu_src $end
     $var wire  1 z alu_src_d $end
     $var wire  1 y branch $end
     $var wire  3 s branch_control_d [2:0] $end
     $var wire  1 y branch_d $end
     $var wire  7 } control_signals [6:0] $end
     $var wire  3 s funct3 [2:0] $end
     $var wire  1 t funct7b5 $end
     $var wire  1 x jump $end
     $var wire  1 x jump_d $end
     $var wire  1 w memwrite $end
     $var wire  1 w memwrite_d $end
     $var wire  7 r opcode [6:0] $end
     $var wire  1 v regwrite $end
     $var wire  1 v regwrite_d $end
     $var wire  2 | result_src [1:0] $end
     $var wire  2 | result_src_d [1:0] $end
     $scope module ALU_decode_unit $end
      $var wire  7 l! OP_B [6:0] $end
      $var wire  7 m! OP_I [6:0] $end
      $var wire  7 n! OP_J [6:0] $end
      $var wire  7 j! OP_LW [6:0] $end
      $var wire  7 o! OP_R [6:0] $end
      $var wire  7 k! OP_SW [6:0] $end
      $var wire  4 { alu_control [3:0] $end
      $var wire  3 s funct3 [2:0] $end
      $var wire  1 t funct7b5 $end
      $var wire  7 r opcode [6:0] $end
     $upscope $end
    $upscope $end
    $scope module immediate_generation_unit $end
     $var wire  7 l! OP_B [6:0] $end
     $var wire  7 m! OP_I [6:0] $end
     $var wire  7 n! OP_J [6:0] $end
     $var wire  7 j! OP_LW [6:0] $end
     $var wire  7 k! OP_SW [6:0] $end
     $var wire 32 u immediate_out [31:0] $end
     $var wire 32 P instruction [31:0] $end
     $var wire  7 r opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module IF_unit $end
    $var wire  1 D! clk $end
    $var wire 32 J! instr_mem(0) [31:0] $end
    $var wire 32 K! instr_mem(1) [31:0] $end
    $var wire 32 T! instr_mem(10) [31:0] $end
    $var wire 32 U! instr_mem(11) [31:0] $end
    $var wire 32 V! instr_mem(12) [31:0] $end
    $var wire 32 W! instr_mem(13) [31:0] $end
    $var wire 32 X! instr_mem(14) [31:0] $end
    $var wire 32 Y! instr_mem(15) [31:0] $end
    $var wire 32 Z! instr_mem(16) [31:0] $end
    $var wire 32 [! instr_mem(17) [31:0] $end
    $var wire 32 \! instr_mem(18) [31:0] $end
    $var wire 32 ]! instr_mem(19) [31:0] $end
    $var wire 32 L! instr_mem(2) [31:0] $end
    $var wire 32 ^! instr_mem(20) [31:0] $end
    $var wire 32 _! instr_mem(21) [31:0] $end
    $var wire 32 `! instr_mem(22) [31:0] $end
    $var wire 32 a! instr_mem(23) [31:0] $end
    $var wire 32 b! instr_mem(24) [31:0] $end
    $var wire 32 c! instr_mem(25) [31:0] $end
    $var wire 32 d! instr_mem(26) [31:0] $end
    $var wire 32 e! instr_mem(27) [31:0] $end
    $var wire 32 f! instr_mem(28) [31:0] $end
    $var wire 32 g! instr_mem(29) [31:0] $end
    $var wire 32 M! instr_mem(3) [31:0] $end
    $var wire 32 h! instr_mem(30) [31:0] $end
    $var wire 32 i! instr_mem(31) [31:0] $end
    $var wire 32 N! instr_mem(4) [31:0] $end
    $var wire 32 O! instr_mem(5) [31:0] $end
    $var wire 32 P! instr_mem(6) [31:0] $end
    $var wire 32 Q! instr_mem(7) [31:0] $end
    $var wire 32 R! instr_mem(8) [31:0] $end
    $var wire 32 S! instr_mem(9) [31:0] $end
    $var wire 32 P instruction [31:0] $end
    $var wire 32 q next_pc [31:0] $end
    $var wire 32 Q pc [31:0] $end
    $var wire 32 \ pc_branch_dest [31:0] $end
    $var wire 32 R pc_plus_4 [31:0] $end
    $var wire  1 b pc_src $end
    $var wire  1 E! reset $end
    $var wire  1 l stall_f $end
   $upscope $end
   $scope module MEM_unit $end
    $var wire 32 ] alu_result_m [31:0] $end
    $var wire  1 D! clk $end
    $var wire 32 ] mem_alu_result_m [31:0] $end
    $var wire 32 #! mem_array(0) [31:0] $end
    $var wire 32 $! mem_array(1) [31:0] $end
    $var wire 32 -! mem_array(10) [31:0] $end
    $var wire 32 .! mem_array(11) [31:0] $end
    $var wire 32 /! mem_array(12) [31:0] $end
    $var wire 32 0! mem_array(13) [31:0] $end
    $var wire 32 1! mem_array(14) [31:0] $end
    $var wire 32 2! mem_array(15) [31:0] $end
    $var wire 32 3! mem_array(16) [31:0] $end
    $var wire 32 4! mem_array(17) [31:0] $end
    $var wire 32 5! mem_array(18) [31:0] $end
    $var wire 32 6! mem_array(19) [31:0] $end
    $var wire 32 %! mem_array(2) [31:0] $end
    $var wire 32 7! mem_array(20) [31:0] $end
    $var wire 32 8! mem_array(21) [31:0] $end
    $var wire 32 9! mem_array(22) [31:0] $end
    $var wire 32 :! mem_array(23) [31:0] $end
    $var wire 32 ;! mem_array(24) [31:0] $end
    $var wire 32 <! mem_array(25) [31:0] $end
    $var wire 32 =! mem_array(26) [31:0] $end
    $var wire 32 >! mem_array(27) [31:0] $end
    $var wire 32 ?! mem_array(28) [31:0] $end
    $var wire 32 @! mem_array(29) [31:0] $end
    $var wire 32 &! mem_array(3) [31:0] $end
    $var wire 32 A! mem_array(30) [31:0] $end
    $var wire 32 B! mem_array(31) [31:0] $end
    $var wire 32 '! mem_array(4) [31:0] $end
    $var wire 32 (! mem_array(5) [31:0] $end
    $var wire 32 )! mem_array(6) [31:0] $end
    $var wire 32 *! mem_array(7) [31:0] $end
    $var wire 32 +! mem_array(8) [31:0] $end
    $var wire 32 ,! mem_array(9) [31:0] $end
    $var wire  1 ` mem_regwrite_m $end
    $var wire 32 f mem_wb_alu_result [31:0] $end
    $var wire 32 g mem_wb_pc_plus_4 [31:0] $end
    $var wire  5 h mem_wb_rd [4:0] $end
    $var wire  1 d mem_wb_regwrite $end
    $var wire  2 e mem_wb_result_src [1:0] $end
    $var wire  1 . memwrite_m $end
    $var wire 32 ^ pc_plus_4_m [31:0] $end
    $var wire  5 _ rd_m [4:0] $end
    $var wire 32 c readdata [31:0] $end
    $var wire  1 ` regwrite_m $end
    $var wire  1 E! reset $end
    $var wire  2 a result_src_m [1:0] $end
    $var wire 32 - writedata_m [31:0] $end
   $upscope $end
   $scope module WB_unit $end
    $var wire 32 f alu_result_w [31:0] $end
    $var wire  1 D! clk $end
    $var wire 32 g pc_plus_4_w [31:0] $end
    $var wire  5 h rd_w [4:0] $end
    $var wire 32 c readdata_w [31:0] $end
    $var wire  1 d regwrite_w $end
    $var wire  1 E! reset $end
    $var wire  2 e result_src_w [1:0] $end
    $var wire  5 j wb_rd [4:0] $end
    $var wire  1 i wb_regwrite $end
    $var wire 32 k wb_result [31:0] $end
   $upscope $end
   $scope module hazard_unit $end
    $var wire  1 D! clk $end
    $var wire  1 m flush_d $end
    $var wire  1 n flush_e $end
    $var wire  2 o forward_operand_a_e [1:0] $end
    $var wire  2 p forward_operand_b_e [1:0] $end
    $var wire  1 l lw_stall $end
    $var wire  1 b pc_src_e $end
    $var wire  5 S rd_e [4:0] $end
    $var wire  5 _ rd_m [4:0] $end
    $var wire  5 h rd_w [4:0] $end
    $var wire  1 ` regwrite_m $end
    $var wire  1 d regwrite_w $end
    $var wire  1 E! reset $end
    $var wire  1 C! result_src_e_0 $end
    $var wire  5 Y rs1_d [4:0] $end
    $var wire  5 + rs1_e [4:0] $end
    $var wire  5 Z rs2_d [4:0] $end
    $var wire  5 , rs2_e [4:0] $end
    $var wire  1 l stall_d $end
    $var wire  1 l stall_f $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
0%
0&
0'
b0000 (
b000 )
0*
b00000 +
b00000 ,
b00000000000000000000000000000000 -
0.
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
0V
b00 W
b00000000000000000000000000000000 X
b00000 Y
b00000 Z
1[
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000 _
0`
b00 a
0b
b00000000000000000000000000000000 c
0d
b00 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000 h
0i
b00000 j
b00000000000000000000000000000000 k
0l
0m
0n
b00 o
b00 p
b00000000000000000000000000000000 q
b0000000 r
b000 s
0t
b00000000000000000000000000000000 u
0v
0w
0x
0y
0z
b0000 {
b00 |
b0000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000100 #!
b00000000000000000000000000001000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000000000000000000000000000000 5!
b00000000000000000000000000000000 6!
b00000000000000000000000000000000 7!
b00000000000000000000000000000000 8!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 ;!
b00000000000000000000000000000000 <!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b00000000000000000000000000000000 B!
0C!
1D!
1E!
1F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
0I!
b00000000000000000010001010000011 J!
b00000000000000000000000000000000 K!
b00000000000000000000000000000000 L!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 N!
b00000000000000000000000000000000 O!
b00000000000000000000000000000000 P!
b00000000000000000000000000000000 Q!
b00000000000000000000000000000000 R!
b00000000000000000000000000000000 S!
b00000000000000000000000000000000 T!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 V!
b00000000000000000000000000000000 W!
b00000000000000000000000000000000 X!
b00000000000000000000000000000000 Y!
b00000000000000000000000000000000 Z!
b00000000000000000000000000000000 [!
b00000000000000000000000000000000 \!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 ^!
b00000000000000000000000000000000 _!
b00000000000000000000000000000000 `!
b00000000000000000000000000000000 a!
b00000000000000000000000000000000 b!
b00000000000000000000000000000000 c!
b00000000000000000000000000000000 d!
b00000000000000000000000000000000 e!
b00000000000000000000000000000000 f!
b00000000000000000000000000000000 g!
b00000000000000000000000000000000 h!
b00000000000000000000000000000000 i!
b0000011 j!
b0100011 k!
b1100011 l!
b0010011 m!
b1101111 n!
b0110011 o!
#1
b00000000000000000000000000100000 O
0D!
#2
b00000000000000000010001010000011 P
b00000000000000000000000000000100 R
b00000000000000000000000000000100 c
b00000000000000000000000000000100 q
b0000011 r
b010 s
1v
1z
b01 |
b1100100 }
1D!
0E!
#3
b00000000000000000000000000000011 0
b00000000000000000000000000000100 1
b00000000000000000000000000000101 2
b00000000000000000000000000000110 3
b00000000000000000000000000000111 4
b00000000000000000000000000001000 5
b00000000000000000000000000001001 6
b00000000000000000000000000001010 7
b00000000000000000000000000001011 8
b00000000000000000000000000001100 9
b00000000000000000000000000001101 :
b00000000000000000000000000001110 ;
b00000000000000000000000000001111 <
b00000000000000000000000000010000 =
b00000000000000000000000000010001 >
b00000000000000000000000000010010 ?
b00000000000000000000000000010011 @
b00000000000000000000000000010100 A
b00000000000000000000000000010101 B
b00000000000000000000000000010110 C
b00000000000000000000000000010111 D
b00000000000000000000000000011000 E
b00000000000000000000000000011001 F
b00000000000000000000000000011010 G
b00000000000000000000000000011011 H
b00000000000000000000000000011100 I
b00000000000000000000000000011101 J
b00000000000000000000000000011110 K
b00000000000000000000000000011111 L
b00000000000000000000000000100000 M
b00000000000000000000000000100001 N
0D!
#4
b010 )
1*
b00000000000000000000000000000000 P
b00000000000000000000000000000100 Q
b00000000000000000000000000001000 R
b00101 S
1V
b01 W
b00000000000000000000000000000100 X
b00000000000000000000000000001000 q
b0000000 r
b000 s
0v
0z
b00 |
b0000000 }
1C!
1D!
0F!
#5
0D!
#6
b000 )
0*
b00000000000000000000000000001000 Q
b00000000000000000000000000001100 R
b00000 S
b00000000000000000000000000000100 T
0V
b00 W
b00000000000000000000000000001000 X
b00000000000000000000000000000100 \
b00000000000000000000000000000100 ^
b00101 _
1`
b01 a
b00000000000000000000000000001100 q
0C!
1D!
1F!
#7
0D!
#8
b00000000000000000000000000001100 Q
b00000000000000000000000000010000 R
b00000000000000000000000000001000 T
b00000000000000000000000000001100 X
b00000000000000000000000000001000 \
b00000000000000000000000000001000 ^
b00000 _
0`
b00 a
1d
b01 e
b00000000000000000000000000000100 g
b00101 h
b00000000000000000000000000010000 q
1D!
#9
0D!
#10
b00000000000000000000000000010000 Q
b00000000000000000000000000010100 R
b00000000000000000000000000001100 T
b00000000000000000000000000010000 X
b00000000000000000000000000001100 \
b00000000000000000000000000001100 ^
0d
b00 e
b00000000000000000000000000001000 g
b00000 h
1i
b00101 j
b00000000000000000000000000000100 k
b00000000000000000000000000010100 q
1D!
#11
b00000000000000000000000000000100 4
0D!
#12
b00000000000000000000000000010100 Q
b00000000000000000000000000011000 R
b00000000000000000000000000010000 T
b00000000000000000000000000010100 X
b00000000000000000000000000010000 \
b00000000000000000000000000010000 ^
b00000000000000000000000000001100 g
0i
b00000 j
b00000000000000000000000000000000 k
b00000000000000000000000000011000 q
1D!
#13
0D!
#14
b00000000000000000000000000011000 Q
b00000000000000000000000000011100 R
b00000000000000000000000000010100 T
b00000000000000000000000000011000 X
b00000000000000000000000000010100 \
b00000000000000000000000000010100 ^
b00000000000000000000000000010000 g
b00000000000000000000000000011100 q
1D!
#15
0D!
#16
b00000000000000000000000000011100 Q
b00000000000000000000000000100000 R
b00000000000000000000000000011000 T
b00000000000000000000000000011100 X
b00000000000000000000000000011000 \
b00000000000000000000000000011000 ^
b00000000000000000000000000010100 g
b00000000000000000000000000100000 q
1D!
#17
0D!
#18
b00000000000000000000000000100000 Q
b00000000000000000000000000100100 R
b00000000000000000000000000011100 T
b00000000000000000000000000100000 X
b00000000000000000000000000011100 \
b00000000000000000000000000011100 ^
b00000000000000000000000000011000 g
b00000000000000000000000000100100 q
1D!
#19
0D!
