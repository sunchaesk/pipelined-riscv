$version Generated by VerilatedVcd $end
$date Sun Jul  7 00:15:59 2024
 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 c clk $end
  $var wire 32 e instr_out [31:0] $end
  $var wire 32 f pc_out [31:0] $end
  $var wire  1 d reset $end
  $scope module riscv $end
   $var wire 32 n alu_result [31:0] $end
   $var wire  1 c clk $end
   $var wire 32 h ex_mem_alu_result [31:0] $end
   $var wire 32 j ex_mem_instr [31:0] $end
   $var wire 32 i ex_mem_reg_b [31:0] $end
   $var wire  4 0 id_ex_alu_control_d [3:0] $end
   $var wire  1 1 id_ex_alu_src_d $end
   $var wire  1 / id_ex_branch_d $end
   $var wire 32 * id_ex_imm [31:0] $end
   $var wire  1 . id_ex_jump_d $end
   $var wire  1 - id_ex_memwrite_d $end
   $var wire 32 ' id_ex_pc [31:0] $end
   $var wire 32 2 id_ex_pc_plus_4 [31:0] $end
   $var wire  5 & id_ex_rd [4:0] $end
   $var wire 32 ( id_ex_reg_a [31:0] $end
   $var wire 32 ) id_ex_reg_b [31:0] $end
   $var wire  1 + id_ex_regwrite_d $end
   $var wire  2 , id_ex_result_src_d [1:0] $end
   $var wire 32 # if_id_instr [31:0] $end
   $var wire 32 $ if_id_pc [31:0] $end
   $var wire 32 % if_id_pc_plus_4 [31:0] $end
   $var wire 32 e instr_out [31:0] $end
   $var wire 32 k mem_wb_alu_result [31:0] $end
   $var wire 32 m mem_wb_data [31:0] $end
   $var wire 32 l mem_wb_instr [31:0] $end
   $var wire 32 f pc_out [31:0] $end
   $var wire  1 g pc_src $end
   $var wire  1 d reset $end
   $var wire  1 o zero_flag $end
   $scope module ID_unit $end
    $var wire  4 0 alu_control_d [3:0] $end
    $var wire  4 _ alu_control_d_temp [3:0] $end
    $var wire  1 1 alu_src_d $end
    $var wire  1 ^ alu_src_d_temp $end
    $var wire  1 / branch_d $end
    $var wire  1 ] branch_d_temp $end
    $var wire  1 c clk $end
    $var wire  3 W funct3 [2:0] $end
    $var wire  1 X funct7b5 $end
    $var wire 32 a i [31:0] $end
    $var wire 32 ' id_ex_pc [31:0] $end
    $var wire 32 2 id_ex_pc_plus_4 [31:0] $end
    $var wire 32 * immediate [31:0] $end
    $var wire 32 Y immediate_temp [31:0] $end
    $var wire 32 # instruction [31:0] $end
    $var wire  1 . jump_d $end
    $var wire  1 \ jump_d_temp $end
    $var wire  1 - memwrite_d $end
    $var wire  1 [ memwrite_d_temp $end
    $var wire  7 V opcode [6:0] $end
    $var wire 32 $ pc [31:0] $end
    $var wire 32 % pc_plus_4 [31:0] $end
    $var wire  5 & rd_out [4:0] $end
    $var wire 32 4 reg_array(0) [31:0] $end
    $var wire 32 5 reg_array(1) [31:0] $end
    $var wire 32 > reg_array(10) [31:0] $end
    $var wire 32 ? reg_array(11) [31:0] $end
    $var wire 32 @ reg_array(12) [31:0] $end
    $var wire 32 A reg_array(13) [31:0] $end
    $var wire 32 B reg_array(14) [31:0] $end
    $var wire 32 C reg_array(15) [31:0] $end
    $var wire 32 D reg_array(16) [31:0] $end
    $var wire 32 E reg_array(17) [31:0] $end
    $var wire 32 F reg_array(18) [31:0] $end
    $var wire 32 G reg_array(19) [31:0] $end
    $var wire 32 6 reg_array(2) [31:0] $end
    $var wire 32 H reg_array(20) [31:0] $end
    $var wire 32 I reg_array(21) [31:0] $end
    $var wire 32 J reg_array(22) [31:0] $end
    $var wire 32 K reg_array(23) [31:0] $end
    $var wire 32 L reg_array(24) [31:0] $end
    $var wire 32 M reg_array(25) [31:0] $end
    $var wire 32 N reg_array(26) [31:0] $end
    $var wire 32 O reg_array(27) [31:0] $end
    $var wire 32 P reg_array(28) [31:0] $end
    $var wire 32 Q reg_array(29) [31:0] $end
    $var wire 32 7 reg_array(3) [31:0] $end
    $var wire 32 R reg_array(30) [31:0] $end
    $var wire 32 S reg_array(31) [31:0] $end
    $var wire 32 8 reg_array(4) [31:0] $end
    $var wire 32 9 reg_array(5) [31:0] $end
    $var wire 32 : reg_array(6) [31:0] $end
    $var wire 32 ; reg_array(7) [31:0] $end
    $var wire 32 < reg_array(8) [31:0] $end
    $var wire 32 = reg_array(9) [31:0] $end
    $var wire  1 + regwrite_d $end
    $var wire  1 Z regwrite_d_temp $end
    $var wire  1 d reset $end
    $var wire  2 , result_src_d [1:0] $end
    $var wire  2 ` result_src_d_temp [1:0] $end
    $var wire  5 T rs1 [4:0] $end
    $var wire 32 ( rs1_data [31:0] $end
    $var wire  5 U rs2 [4:0] $end
    $var wire 32 ) rs2_data [31:0] $end
    $var wire  1 q writeback_control $end
    $var wire 32 r writeback_data [31:0] $end
    $scope module control_signal_unit $end
     $var wire  7 v OP_B [6:0] $end
     $var wire  7 w OP_I [6:0] $end
     $var wire  7 x OP_J [6:0] $end
     $var wire  7 s OP_LW [6:0] $end
     $var wire  7 u OP_R [6:0] $end
     $var wire  7 t OP_SW [6:0] $end
     $var wire  4 _ alu_control_d [3:0] $end
     $var wire  1 ^ alu_src $end
     $var wire  1 ^ alu_src_d $end
     $var wire  1 ] branch $end
     $var wire  1 ] branch_d $end
     $var wire  7 b control_signals [6:0] $end
     $var wire  3 W funct3 [2:0] $end
     $var wire  1 X funct7b5 $end
     $var wire  1 \ jump $end
     $var wire  1 \ jump_d $end
     $var wire  1 [ memwrite $end
     $var wire  1 [ memwrite_d $end
     $var wire  7 V opcode [6:0] $end
     $var wire  1 Z regwrite $end
     $var wire  1 Z regwrite_d $end
     $var wire  2 ` result_src [1:0] $end
     $var wire  2 ` result_src_d [1:0] $end
     $scope module ALU_decode_unit $end
      $var wire  7 v OP_B [6:0] $end
      $var wire  7 w OP_I [6:0] $end
      $var wire  7 x OP_J [6:0] $end
      $var wire  7 s OP_LW [6:0] $end
      $var wire  7 u OP_R [6:0] $end
      $var wire  7 t OP_SW [6:0] $end
      $var wire  4 _ alu_control [3:0] $end
      $var wire  3 W funct3 [2:0] $end
      $var wire  1 X funct7b5 $end
      $var wire  7 V opcode [6:0] $end
     $upscope $end
    $upscope $end
    $scope module immediate_generation_unit $end
     $var wire  7 v OP_B [6:0] $end
     $var wire  7 w OP_I [6:0] $end
     $var wire  7 x OP_J [6:0] $end
     $var wire  7 s OP_LW [6:0] $end
     $var wire  7 u OP_R [6:0] $end
     $var wire  7 t OP_SW [6:0] $end
     $var wire 32 Y immediate_out [31:0] $end
     $var wire 32 # instruction [31:0] $end
     $var wire  7 V opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module IF_unit $end
    $var wire  1 c clk $end
    $var wire 32 $ curr_count [31:0] $end
    $var wire 32 # instruction [31:0] $end
    $var wire 32 3 next_count [31:0] $end
    $var wire 32 $ pc [31:0] $end
    $var wire 32 p pc_branch_dest [31:0] $end
    $var wire 32 % pc_plus_4 [31:0] $end
    $var wire  1 g pc_src $end
    $var wire  1 d reset $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000100 %
b00000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
0+
b00 ,
0-
0.
0/
b0000 0
01
b00000000000000000000000000000000 2
b00000000000000000000000000000100 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000 T
b00000 U
b0000000 V
b000 W
0X
b00000000000000000000000000000000 Y
0Z
0[
0\
0]
0^
b0000 _
b00 `
b00000000000000000000000000000000 a
b0000000 b
1c
1d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
0g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
0o
b00000000000000000000000000001010 p
0q
b00000000000000000000000000000000 r
b0000011 s
b0100011 t
b0110011 u
b1100011 v
b0010011 w
b1101111 x
#1
0c
#2
b01000000010100110000001110110011 #
b00000000000000000000000000000100 $
b00000000000000000000000000001000 %
b00000000000000000000000000000001 (
b00000000000000000000000000000001 )
b00000000000000000000000000000100 2
b00000000000000000000000000001000 3
b00000000000000000000000000000001 4
b00000000000000000000000000000010 5
b00000000000000000000000000000011 6
b00000000000000000000000000000100 7
b00000000000000000000000000000101 8
b00000000000000000000000000000110 9
b00000000000000000000000000000111 :
b00000000000000000000000000001000 ;
b00000000000000000000000000001001 <
b00000000000000000000000000001010 =
b00000000000000000000000000001011 >
b00000000000000000000000000001100 ?
b00000000000000000000000000001101 @
b00000000000000000000000000001110 A
b00000000000000000000000000001111 B
b00000000000000000000000000010000 C
b00000000000000000000000000010001 D
b00000000000000000000000000010010 E
b00000000000000000000000000010011 F
b00000000000000000000000000010100 G
b00000000000000000000000000010101 H
b00000000000000000000000000010110 I
b00000000000000000000000000010111 J
b00000000000000000000000000011000 K
b00000000000000000000000000011001 L
b00000000000000000000000000011010 M
b00000000000000000000000000011011 N
b00000000000000000000000000011100 O
b00000000000000000000000000011101 P
b00000000000000000000000000011110 Q
b00000000000000000000000000011111 R
b00000000000000000000000000100000 S
b00110 T
b00101 U
b0110011 V
1X
1Z
b1000 _
b1000000 b
1c
0d
#3
0c
#4
b00000000000000000000000000000000 #
b00000000000000000000000000001000 $
b00000000000000000000000000001100 %
b00111 &
b00000000000000000000000000000100 '
b00000000000000000000000000000111 (
b00000000000000000000000000000110 )
1+
b1000 0
b00000000000000000000000000001000 2
b00000000000000000000000000001100 3
b00000 T
b00000 U
b0000000 V
0X
0Z
b0000 _
b0000000 b
1c
#5
0c
#6
b00000000000000000000000000001100 $
b00000000000000000000000000010000 %
b00000 &
b00000000000000000000000000001000 '
b00000000000000000000000000000001 (
b00000000000000000000000000000001 )
0+
b0000 0
b00000000000000000000000000001100 2
b00000000000000000000000000010000 3
1c
#7
0c
#8
b00000000000000000000000000010000 $
b00000000000000000000000000010100 %
b00000000000000000000000000001100 '
b00000000000000000000000000010000 2
b00000000000000000000000000010100 3
1c
#9
0c
#10
b00000000000000000000000000010100 $
b00000000000000000000000000011000 %
b00000000000000000000000000010000 '
b00000000000000000000000000010100 2
b00000000000000000000000000011000 3
1c
#11
0c
#12
b00000000000000000000000000011000 $
b00000000000000000000000000011100 %
b00000000000000000000000000010100 '
b00000000000000000000000000011000 2
b00000000000000000000000000011100 3
1c
#13
0c
#14
b00000000000000000000000000011100 $
b00000000000000000000000000100000 %
b00000000000000000000000000011000 '
b00000000000000000000000000011100 2
b00000000000000000000000000100000 3
1c
#15
0c
#16
b00000000000000000000000000100000 $
b00000000000000000000000000100100 %
b00000000000000000000000000011100 '
b00000000000000000000000000100000 2
b00000000000000000000000000100100 3
1c
#17
0c
#18
b00000000000000000000000000100100 $
b00000000000000000000000000101000 %
b00000000000000000000000000100000 '
b00000000000000000000000000100100 2
b00000000000000000000000000101000 3
1c
#19
0c
